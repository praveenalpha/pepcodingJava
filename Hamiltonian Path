#include <iostream>
#include <vector>
#include <string>

using namespace std;
bool hamiltonian(vector<vector<int>>& gp,int n,int edgesSoFar,int src,vector<bool>& vis){
    if(edgesSoFar == n-1){
        return true;
    }
    bool res = false;
    vis[src] = true;
    for(auto e:gp[src]){
        if(vis[e] == false)
            res = res || hamiltonian(gp,n,edgesSoFar+1,e,vis);
    }
    vis[src] = false;
    return res;
}
int main() {
	int t;
	cin>>t;
	while(t--){
	    int n,m;
	    cin>>n>>m;
	    vector<vector<int>> gp(n+1,vector<int>());
	    while(m--){
	        int u,v;
	        cin>>u>>v;
	        gp[u].push_back(v);
	        gp[v].push_back(u);
	    }
	    
	    int flag=0;
	    for(int i=1;i<=n;i++) {
	        vector<bool>vis(n+1,false);
	        bool ans=hamiltonian(gp,n,0,i,vis);
	        if(ans == true) {
	            flag=1;
	            cout<<"1\n";
	            break;
	        }
	    }
	    if(flag == 0)
	        cout<<"0"<<'\n';
	   
	   // for(int i=0;i<=n;i++)
	   // cout<<vis[i];
	}
	return 0;
}
