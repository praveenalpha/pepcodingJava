    //VERTICAL ORDER===============================================================================
    static int minLeft=0;
    static int maxRight=0;
    public static void width(node root,int lev){
        if(root==null)  return;
        minLeft = Math.min(minLeft,lev);
        maxRight = Math.max(maxRight,lev);
        width(root.left,lev-1);
        width(root.right,lev+1);
    }
    public static class pairVO{
        node root;
        int vl;
        public pairVO(node root,int vl){
            this.root=root;
            this.vl=vl;
        }
    }
    public static void verticalOrder(node root){
        width(root,0);
        int n=maxRight-minLeft+1;
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        for(int i=0;i<n;i++)
            ans.add(new ArrayList<>());
        LinkedList<pairVO> que = new LinkedList<>();
        que.addLast(new pairVO(root,-minLeft));
        while(que.size() != 0){
            int size = que.size();
            while(size-- > 0){
                pairVO rpair = que.removeFirst();
                ans.get(rpair.vl).add(rpair.root.data);
                if(rpair.root.left!=null)   que.addLast(new pairVO(rpair.root.left,rpair.vl-1));
                if(rpair.root.right!=null)   que.addLast(new pairVO(rpair.root.right,rpair.vl+1));
            }
        }
        for(ArrayList<Integer> ar:ans)
            System.out.println(ar);
        

    }
