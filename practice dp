#include <iostream>
#include <vector>
#include <string>
using namespace std;
int mazePath(int sr, int sc, int er, int ec)
{
    if (sr == er && sc == ec)
        return 1;
    int count = 0;
    if (sc + 1 <= ec)
        count += mazePath(sr, sc + 1, er, ec);
    if (sc + 1 <= ec && sr + 1 <= er)
        count += mazePath(sr + 1, sc + 1, er, ec);
    if (sr + 1 <= er)
        count += mazePath(sr + 1, sc, er, ec);
    return count;
}
int mazePathHV(int sr, int sc, int er, int ec, vector<vector<int>> &dp)
{
    if (sr == er && sc == ec)
    {
        return dp[er][ec] = 1;
    }
    if (dp[sr][sc] != 0)
    {
        return dp[sr][sc];
    }
    int count = 0;
    if (sc + 1 <= ec)
    {
        count += mazePathHV(sr, sc + 1, er, ec, dp);
    }
    if (sc + 1 <= ec && sr + 1 <= er)
    {
        count += mazePathHV(sr + 1, sc + 1, er, ec, dp);
    }
    if (sr + 1 <= er)
    {
        count += mazePathHV(sr + 1, sc, er, ec, dp);
    }
    return dp[sr][sc] = count;
}
int mazePathHVDP(int sr, int sc, int er, int ec, vector<vector<int>> &dp)
{
    for (int i = er; i >= 0; i--)
    {
        for (int j = ec; j >= 0; j--)
        {
            if (i == er && j == ec)
            {
                dp[er][ec] = 1;
                continue;
            }
            int count = 0;
            if (j + 1 <= ec)
                count += dp[i][j + 1];
            if (j + 1 <= ec && i + 1 <= er)
                count += dp[i + 1][j + 1];
            if (i + 1 <= er)
                count += dp[i + 1][j];
            dp[i][j] = count;
        }
    }
    return dp[0][0];
}
int mazePathMulti(int sr, int sc, int er, int ec, vector<vector<int>> &dp)
{
    if (sr == er && sc == ec)
    {
        return dp[sr][sc] = 1;
    }
    if (dp[sr][sc] != 0)
    {
        return dp[sr][sc];
    }
    int count = 0;
    for (int jump = 1; jump + sc <= ec; jump++)
    {
        count += mazePathMulti(sr, sc + jump, er, ec, dp);
    }
    for (int jump = 1; jump + sr <= er && jump + sc <= ec; jump++)
    {
        count += mazePathMulti(sr + jump, sc + jump, er, ec, dp);
    }
    for (int jump = 1; jump + sr <= er; jump++)
    {
        count += mazePathMulti(sr + jump, sc, er, ec, dp);
    }
    return dp[sr][sc] = count;
}
int mazePathMultiDP(int sr, int sc, int er, int ec, vector<vector<int>> &dp)
{
    for (int i = er; i >= 0; i--)
    {
        for (int j = ec; j >= 0; j--)
        {
            if (i == er && j == ec)
            {
                dp[er][ec] = 1;
                continue;
            }
            int count = 0;
            for (int jump = 1; jump + j <= ec; jump++)
            {
                count += dp[i][j + jump];
            }
            for (int jump = 1; jump + j <= ec && jump + i <= er; jump++)
            {
                count += dp[i + jump][j + jump];
            }
            for (int jump = 1; jump + i <= er; jump++)
            {
                count += dp[i + jump][j];
            }
            dp[i][j] = count;
        }
    }
    return dp[sr][sc];
}

//diceSumTo10=====================================================================================================================
int diceToSum10(int sp, int ep, vector<int> &dp)
{
    if (sp == ep)
    {
        return dp[sp] = 1;
    }
    if (dp[sp] != 0)
        return dp[sp];

    int count = 0;

    for (int dice = 1; dice + sp <= ep && dice <= 6; dice++)
    {
        count += diceToSum10(sp + dice, ep, dp);
    }

    return dp[sp] = count;
}
//climmbStairs=====================================================================================================================
int climbStairs(int n)
{
    if (n == 0)
    {
        return 1;
    }
    int count = 0;
    if (n - 1 >= 0)
        count += climbStairs(n - 1);
    if (n - 2 >= 0)
        count += climbStairs(n - 2);
    return count;
}
int climbStairs02(int n, vector<int> &dp)
{
    if (n == 0)
    {
        return dp[0] = 1;
    }
    if (dp[n] != 0)
        return dp[n];
    int count = 0;
    if (n - 1 >= 0)
        count += climbStairs02(n - 1, dp);
    if (n - 2 >= 0)
        count += climbStairs02(n - 2, dp);
    return dp[n] = count;
}
int climbStairs03(int n, vector<int> &dp)
{
    for (int i = 0; i <= n; i++)
    {
        if (i == 0)
        {
            dp[i] = 1;
            continue;
        }
        int count = 0;
        if (i - 1 >= 0)
            count += dp[i - 1];
        if (i - 2 >= 0)
            count += dp[i - 2];
        dp[i] = count;
    }
    return dp[n];
}
int climbStairs04(int n)
{
    int a = 1;
    int b = 1;
    int temp;
    for (int i = 2; i <= n; i++)
    {
        temp = a + b;
        a = b;
        b = temp;
    }
    return b;
}
//minCostClimbingStairsDP===========================================================================================================
int minCost(int n, vector<int> &cost, vector<int> &dp)
{
    if (n <= 1)
    {
        return dp[n] = cost[n];
    }
    if (dp[n] != 0)
        return dp[n];
    int ans = min(minCost(n - 1, cost, dp), minCost(n - 2, cost, dp));
    return dp[n] = ans + cost[n];
}
int minCostDP(int n, vector<int> &cost, vector<int> &dp)
{
    for (int i = 0; i <= n; i++)
    {
        if (i <= 1)
        {
            dp[i] = cost[i];
            continue;
        }
        int ans = min(dp[i - 1], dp[i - 2]);
        dp[i] = cost[i] + ans;
    }
    return dp[n];
}
//pairOrSingle=====================================================================================================================

//goldmine========================================================================================================================

//https://www.geeksforgeeks.org/count-number-of-ways-to-partition-a-set-into-k-subsets/============================================

// https://practice.geeksforgeeks.org/problems/mobile-numeric-keypad/0=============================================================

//substring and subsequence========================================================================================================
vector<vector<bool>> isPalindromic(string &str, vector<vector<bool>> &dp)
{
    int n = str.length();
    for (int gap = 0; gap < n; gap++)
    {
        for (int i = 0, j = gap; i < n && j < n; i++, j++)
        {
            if (gap == 0)
                dp[i][j] = true;
            else if (gap == 1)
                dp[i][j] = str[i] == str[j];
            else
                dp[i][j] = str[i] == str[j] && dp[i + 1][j - 1];
        }
    }
    return dp;
}
//05 leetcode====================================================================================================================
string longestPlaindromeSubstring(string str)
{
    int n = str.length();
    vector<vector<int>> dp(n, vector<int>(n, 0));

    int maxLen = 0;
    int si = 0, ei = 0;
    for (int gap = 0; gap < n; gap++)
    {
        for (int i = 0, j = gap; j < n; i++, j++)
        {
            if (gap == 0)
                dp[i][j] = 1;
            else if (gap == 1 && str[i] == str[j])
                dp[i][j] = 2;
            else if (str[i] == str[j] && dp[i + 1][j - 1] != 0)
                dp[i][j] = gap + 1;

            if (dp[i][j] > maxLen)
            {
                maxLen = dp[i][j];
                si = i;
                ei = j;
            }
        }
    }

    return str.substr(si, (ei - si + 1));
}
//647============================================================================================================================
int countSubstrings(string s)
{
    int n = s.length();
    int count = 0;
    vector<vector<bool>> dp(n, vector<bool>(n, 0));
    for (int gap = 0; gap < n; gap++)
    {
        for (int i = 0, j = gap; j < n; i++, j++)
        {
            if (gap == 0)
                dp[i][j] = true;
            else if (gap == 1 && s[i] == s[j])
                dp[i][j] = true;
            else
                dp[i][j] = s[i] == s[j] && dp[i + 1][j - 1];
            count += dp[i][j] ? 1 : 0;
        }
    }
    return count;
}
//Leetcode 516.================================================================================================================
int longestPalindromeSubseq(string s, int si, int ei, vector<vector<int>> &dp)
{
    if (si > ei)
        return dp[si][ei] = 0;
    if (si == ei)
        return dp[si][ei] = 1;
    int len;
    if (dp[si][ei] != 0)
        return dp[si][ei];
    if (s[si] == s[ei])
        len = longestPalindromeSubseq(s, si + 1, ei - 1, dp) + 2;
    else
        len = max(longestPalindromeSubseq(s, si + 1, ei, dp), longestPalindromeSubseq(s, si, ei - 1, dp));
    return dp[si][ei] = len;
}
int longestPalindromeSubseqDP(string s, int si, int ei, vector<vector<int>> &dp)
{
    int n = s.length();
    for (int gap = 0; gap < n; gap++)
    {
        for (int i = 0, j = gap; j < n; i++, j++)
        {
            if (i == j)
            {
                dp[i][j] = 1;
                continue;
            }
            if (s[i] == s[j])
            {
                dp[i][j] = 2 + dp[i + 1][j - 1];
            }
            else
            {
                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);
            }
        }
    }
    return dp[0][ei];
}
//distinctSubsequence================================================================================================================
int distinctSubsequence(string &s, string &t, int n, int m, vector<vector<int>> &dp, string ans)
{
    if (m == 0)
    {
        cout << ans << endl;
        return dp[n][m] = 1;
    }
    if (m > n)
    {
        return 0;
    }
    if (dp[n][m] != -1)
        return dp[n][m];
    int count = 0;
    if (s[n - 1] == t[m - 1])
    {
        count += distinctSubsequence(s, t, n - 1, m, dp, s[n - 1] + to_string(n) + t[m - 1] + to_string(m) + ans) + distinctSubsequence(s, t, n - 1, m - 1, dp, s[n - 1] + to_string(n) + t[m - 1] + to_string(m) + ans);
    }
    else
    {
        count += distinctSubsequence(s, t, n - 1, m, dp, ans);
    }
    return dp[n][m] = count;
}
//countPalindromicSubsequence========================================================================================================
int countPS_(string &s, int i, int j, int dp[31][31])
{
    if (i > j)
        return 0;
    if (i == j)
        return dp[i][j] = 1;
    if (dp[i][j] != 0)
        return dp[i][j];

    int middleString = countPS_(s, i + 1, j - 1, dp);
    int excludingLast = countPS_(s, i, j - 1, dp);
    int excludingFirst = countPS_(s, i + 1, j, dp);

    int ans = excludingFirst + excludingLast;
    return dp[i][j] = (s[i] == s[j]) ? ans + 1 : ans - middleString;
}
int countPSDP(string &s, vector<vector<int>> &dp)
{
    for (int gap = 0; gap < s.length(); gap++)
    {
        for (int i = 0; i < s.length(); i++)
        {
            for (int j = gap; j < s.length(); j++)
            {
                if(i>j){
                    dp[i][j] = 0;
                    continue;
                }
                if (i == j)
                {
                    dp[i][j] = 1;
                    continue;
                }
                int middle = dp[i + 1][j - 1];
                int excludeFirst = dp[i + 1][j];
                int excludeLast = dp[i][j - 1];
                int ans = excludeFirst + excludeLast;
                dp[i][j] = s[i] == s[j] ? ans + 1 : ans - middle;
            }
        }
    }
    return dp[0][s.length() - 1];
}
//solve============================================================================================================================
void display2d(vector<vector<int>> &dp)
{
    for (int i = 0; i < dp.size(); i++)
    {
        for (int j = 0; j < dp[0].size(); j++)
        {
            cout << dp[i][j] << " ,";
        }
        cout << endl;
    }
}
void display1d(vector<int> &dp)
{
    for (int i = 0; i < dp.size(); i++)
        cout << dp[i] << " ,";
    cout << endl;
}
void solve()
{
    
    string s = "abcd";
    vector<vector<int>> dp(4,vector<int>(4,-1));
    //int ans = countPS_(s,0,j-1,dp);
    //cout<<ans<<endl;
    cout<<countPSDP(s,dp)<<endl;
    display2d(dp);
}
int main()
{
    solve();
    return 0;
}
