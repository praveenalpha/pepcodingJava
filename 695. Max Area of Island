class Solution {
public:
    vector<vector<int>> dirA = {{0,1},{0,-1},{1,0},{-1,0}};
    int dfs(int i,int j,int n,int m,vector<vector<int>>& grid){
        grid[i][j] = 0;
        int count=1;
        for(int d=0;d<4;d++){
            int r = i + dirA[d][0];
            int c = j + dirA[d][1];
            if(r>=0 && c>= 0 && r<n && c < m && grid[r][c] == 1)
            count += dfs(r,c,n,m,grid);
        }
        cout<<count;
        return count;
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int n=grid.size();
        int count=0;
        if(n==0)
            return 0;
        int m=grid[0].size();
        if(m==0)
            return 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 1){
                    
                    count = max(count,dfs(i,j,n,m,grid));
                    // cout<<count;
                }
            }
        }
        return count;
    }
};
