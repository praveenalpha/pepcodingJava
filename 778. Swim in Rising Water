class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        if(grid.size() ==0 || grid[0].size() == 0)
            return 0;
        int n = grid.size();
        int m = grid[0].size();
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<vector<bool>> vis(n,vector<bool> (m,false));
        vector<vector<int>> dir = {{1,0},{-1,0},{0,1},{0,-1}};
        pq.push({grid[0][0],0});
        vis[0][0] = true;
        int max_=0;
        while(pq.size() != 0){
            pair<int,int> rvtx = pq.top();
            pq.pop();
            int height = rvtx.first;
            max_ = max(max_,height);
            int r = rvtx.second/m;
            int c = rvtx.second%m;
            if(r == n-1 && c == m-1)
                return max_;
            for(int d=0;d<4;d++){
                int x = r + dir[d][0];
                int y = c + dir[d][1];
                if(x >= 0 && y >= 0 && x < n && y < m && !vis[x][y]){
                    vis[x][y] = true;
                    pq.push({grid[x][y],x*m+y});
                }
            }
        }
        return max_;
    }
};
