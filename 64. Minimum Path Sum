class Solution {
public:
    int minPath(int sr,int sc,int er,int ec,vector<vector<int>>& grid,vector<vector<int>>& dp){
        if(sr ==er && sc == ec){
            return dp[sr][sc] = grid[sr][sc];
        }
        if(dp[sr][sc]!=0)
            return dp[sr][sc];
        int rAns = 1e8;
        if(sc+1<=ec)
            rAns = minPath(sr,sc+1,er,ec,grid,dp);
        int dAns = 1e8;
        if(sr+1<=er)
            dAns = minPath(sr+1,sc,er,ec,grid,dp);
        return dp[sr][sc]=min(rAns,dAns)+grid[sr][sc];
    }
    int minPathSum(vector<vector<int>>& grid) {
        vector<vector<int>> dp;
        int n = grid[0].size();
        for(int i=0;i<grid.size();i++){
            dp.push_back(vector<int> (n,0));
        }
        return minPath(0,0,grid.size()-1,n-1,grid,dp);
    }
};
