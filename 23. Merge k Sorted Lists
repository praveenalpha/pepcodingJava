/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
   
    ListNode* mergeTwoLists(ListNode* &l1,ListNode* &l2) {
        if(l1 == nullptr)
            return l2;
        if(l2 == nullptr)
            return l1;
        ListNode* head = new ListNode(-1);
        ListNode* prev = head;
        ListNode* curr1 = l1;
        ListNode* curr2 = l2;
        while(curr1 != nullptr && curr2 != nullptr) {
            if(curr1->val <= curr2->val) {
                prev->next = curr1;
                prev = curr1;
                curr1 = curr1->next;
            }
            else{
                prev->next = curr2;
                prev = curr2;
                curr2 = curr2->next;
            }
        }
        if(curr1 == nullptr) {
            prev->next = curr2;
        }
        else if(curr2 == nullptr) {
            prev->next = curr1;
        }
        return head->next;
    }
    ListNode* mergeKLists_(vector<ListNode*>& lists,int si,int ei) {
        if(si == ei) {
            return lists[si];
        }
        if(si+1 == ei) {
            return mergeTwoLists(lists[si],lists[ei]);
        }
        int mid = (si + ei) / 2 ; 
        ListNode* leftAns = mergeKLists_(lists,si,mid);
        ListNode* rightAns = mergeKLists_(lists,mid+1,ei);
        return mergeTwoLists(leftAns,rightAns);
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size() == 0)   return nullptr;
        int si = 0;
        int ei = lists.size() - 1;
        ListNode* head = mergeKLists_(lists,si,ei);
        return head;
    }
};
