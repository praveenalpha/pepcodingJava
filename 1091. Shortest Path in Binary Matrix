class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        if(n == 0 || m == 0  || grid[0][0] == 1 ||  grid[n-1][m-1] == 1)
            return -1;
        
        vector<vector<int>> dir = {{0,-1},{-1,-1},{-1,0},{-1,1},{0,1},{1,1},{1,0},{1,-1}};
        
        queue<pair<int,int>> q;
        q.push({0,0});
        int ans = 0;
        
        if(n-1 == 0 && m-1 == 0 && grid[0][0] == 0)
            return 1;
        grid[0][0] = 1;
        while(q.size() != 0){
            int size = q.size();
            ans++;
            
            while(size--){
                pair<int,int> rpair = q.front();
                q.pop();
                for(int i=0;i<8;i++){
                    int x = rpair.first + dir[i][0];
                    int y = rpair.second + dir[i][1];
                    
                    if(x>=0&&x<n&&y>=0&&y<m&&grid[x][y] == 0){
                        if(x==n-1 && y == m-1)
                            return ans+1;
                        grid[x][y] = 1;
                        q.push({x,y});
                        
                    }
                }
            }
        }
        return -1;
    }
};
