class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>> q;
        int n = grid.size();
        int m = grid[0].size();
        int freshOranges = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 2)
                    q.push({i,j});
                else if(grid[i][j] == 1)
                    freshOranges++;
            }
        }
        vector<vector<int>> dir = {{0,-1},{-1,0},{0,1},{1,0}};
        if(freshOranges == 0)
            return 0;
        int time = 0;
        while(q.size()!=0){
            if(freshOranges == 0)
                return time;
            int size = q.size();
            while(size--){
                pair<int,int> rpair = q.front();
                q.pop();
                for(int d=0;d<4;d++){
                    int x = rpair.first + dir[d][0];
                    int y = rpair.second + dir[d][1];
                    if(x>=0 && x < n && y>=0 && y<m && grid[x][y] == 1){
                        grid[x][y]=2;
                        freshOranges--;
                        
                        q.push({x,y});
                    }
                }
            }
            time++;
            if(freshOranges == 0)
                return time;
        }
        return -1;
    }
};
