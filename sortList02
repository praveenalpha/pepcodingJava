/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null || l2 == null){
            return (l1 == null) ? l2 : l1;
        }
        
        ListNode head = new ListNode(-1);
        ListNode prev = head;
        
        ListNode curr = l1;
        ListNode curr1 = l2;
        
        while(curr != null && curr1 != null) {
            if(curr.val <= curr1.val){
                prev.next = curr;
                prev = curr;
                curr = curr.next;
            }else{
                prev.next = curr1;
                prev = curr1;
                curr1 = curr1.next;
            }
        }
        if(curr != null){
            prev.next = curr;
        }
        
         if(curr1 != null){
            prev.next = curr1;
        }
        return head.next;
    }
    
    public ListNode middleNode(ListNode head) {
       if(head == null || head.next == null){
            return head;
        }
           
        ListNode slow = head;
        ListNode fast = head;
           
        while(fast != null && fast.next != null && fast.next.next != null){
           slow = slow.next;
           fast = fast.next.next;
        }
       return slow;
    }
    
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        
        ListNode middle = middleNode(head);
        ListNode nhead = middle.next;
        middle.next = null;
        
        return (mergeTwoLists(sortList(head),sortList(nhead)));
        
    }
}
