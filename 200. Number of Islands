class Solution {
public:
    void dfs(int i,int j,int n,int m,vector<vector<char>>& grid){
        grid[i][j] = '0';
        if(i+1 < n && grid[i+1][j] == '1')
            dfs(i+1,j,n,m,grid);
        if(j+1 < m && grid[i][j+1] == '1')
            dfs(i,j+1,n,m,grid);
        if(j-1>=0 && grid[i][j-1] == '1')
            dfs(i,j-1,n,m,grid);
        if(i-1>=0 && grid[i-1][j] == '1')
            dfs(i-1,j,n,m,grid);
        
    }
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size();
        if(n==0)
            return 0;
        int m = grid[0].size();
        if(m==0)
            return 0;
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == '1'){
                    dfs(i,j,n,m,grid);
                    count++;
                }
            }
        }
        return count;
    }
};
