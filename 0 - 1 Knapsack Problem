#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
int knapsack(vector<int>& W,vector<int>& P,int weight,int n,vector<vector<int>>& dp)
{
    if(n == 0 || weight == 0)
        return dp[n][weight] = 0;
    if(dp[n][weight] != -1)
        return dp[n][weight];
    int max_ = -1e8;
    if(weight - W[n-1] >= 0)
        max_ = max(max_,knapsack(W,P,weight - W[n-1],n-1,dp)+P[n-1]);
    max_ = max(max_,knapsack(W,P,weight,n-1,dp));
    return dp[n][weight] = max_;
}
int main() {
	//code
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    int w;
	    cin>>w;
	    vector<int> V;
	    vector<int> W;
	    int temp;
	    for(int i=0;i<n;i++) {
	        cin>>temp;
	        V.push_back(temp);
	    }
	    for(int i=0;i<n;i++) {
	        cin>>temp;
	        W.push_back(temp);
	    }  
	    vector<vector<int>> dp(n + 1, vector<int>(w + 1, -1));
	    cout<<knapsack(W,V,w,n,dp)<<'\n';
	}
	return 0;
}
