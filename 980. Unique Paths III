class Solution {
public:
    vector<vector<int>> dirA={{0,-1},{-1,0},{0,1},{1,0}};
    int uniquePathsIII_(int sr,int sc,int er,int ec,vector<vector<int>>& grid,int freeCell){
        freeCell--;
        if(sr == er && sc == ec){
            if(freeCell == 0)
                return 1;
            return 0;
        }
        int temp = grid[sr][sc];
        grid[sr][sc]=-1;
        int count = 0;
        for(int d=0;d<4;d++){
            int r = sr+dirA[d][0];
            int c = sc+dirA[d][1];
            if(r>=0&&c>=0&&r<grid.size()&&c<grid[0].size()&&grid[r][c]!=-1)
                count+=uniquePathsIII_(r,c,er,ec,grid,freeCell);
        }
        grid[sr][sc]=temp;
        return count;
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        int sr;
        int sc;
        int er;
        int ec;
        int freeCell=grid.size()*grid[0].size();
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==1){
                    sr=i;
                    sc=j;
                }
                else if(grid[i][j]==2){
                    er=i;
                    ec=j;
                }
                else if(grid[i][j]==-1){
                    freeCell--;
                }
            }
        }
        return uniquePathsIII_(sr,sc,er,ec,grid,freeCell);
    }
};
