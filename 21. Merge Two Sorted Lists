/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == nullptr || l2 == nullptr)
            return l1==nullptr?l2:l1;
        ListNode* head = new ListNode(-1);
        ListNode* prev = head;
        ListNode* curr1 = l1;
        ListNode* curr2 = l2;
        while(curr1 != nullptr && curr2 != nullptr){
            if(curr1->val <= curr2->val){
                prev->next = curr1;
                prev = curr1;
                curr1 = curr1->next;
            }
            else{
                prev->next = curr2;
                prev = curr2;
                curr2 = curr2->next;
            }
        }
        prev->next = curr1==nullptr?curr2:curr1;
        return head->next;
    }
};
