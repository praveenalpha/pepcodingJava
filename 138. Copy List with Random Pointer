/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    unordered_map<Node*,Node*> map;
    Node* copyRandomList(Node* head) {
        Node *curr = head;
        while(curr != nullptr){
            Node* node = new Node(curr->val);
            map[curr] = node;
            curr = curr -> next;
        }
        for(auto ele : map){
            if(map.find(ele.first->next) != map.end())
                ele.second->next = map[ele.first->next];
            if(map.find(ele.first->random) != map.end())
                ele.second  -> random = map[ele.first->random];
        }
        return map[head];
    }
};
