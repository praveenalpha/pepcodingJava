

    public static boolean isBipartite_(int src,int[] vis){
        // vis[x]={-1(non visited),0(visited with red),1(visited with green)}
        
        LinkedList<int[]> que=new LinkedList<>();
        que.addLast(new int[]{src,0});  // vtx, color (0 - red, 1 - green)

        while(que.size()!=0){
           int size=que.size();
           while(size-->0){
              int[] pair=que.removeFirst();    
              
              int rvtx=pair[0];
              int color=pair[1]; 

              if(vis[rvtx]! = -1){   // conflict? (either same color/Set or different colors/Set)
                if(color != vis[rvtx]) return false;
                continue;
              }

             vis[rvtx]=color;    
             for(Edge e: graph[rvtx]){
                 if(!vis[e.v])
                   que.addLast(new int[]{e.v,(color+1)%2});
              }
           }
        }

        return true;
    }

    public boolean isBipartite() {
        int[] vis=new int[N];
        Arrays.fill(vis,-1);

        for(int i=0;i<N;i++){
            if(vis[i] == -1){
                if(!isBipartite_(i,vis)){
                    return false;
                }
            }
        }

        return true;
    }
