#include<iostream>
#include<vector>
#include<string>
using namespace std;
int power(int a,int b) {
    if(b==1)
        return a;
    int ans = power(a,b/2);
    if(b%2 == 0)    
        return ans*ans;
    return ans*ans*a;
}
//recurssion on array==================================================================
void display(vector<int> arr,int idx){
    if(idx == arr.size())    return;
    cout<<arr[idx]<<" ";
    display(arr,idx+1);
}
int findFirstIndex(vector<int> arr,int idx,int data) {
    if(arr[idx] == data)
        return idx;
    if(idx == arr.size())
        return -1;
    return findFirstIndex(arr,idx+1,data);
}
int findLastIndex(vector<int> arr,int idx,int data){
    
    if(arr.size() == idx)
        return -1;
    int ans = findLastIndex(arr,idx+1,data);
    if(ans != -1)
        return ans ;
     
    return arr[idx]==data?idx:-1;
}
vector<int> allIndex(vector<int> arr,int idx,int data) {
    if(idx == arr.size()) {
        vector<int> ans;
        return ans;
    } 
    vector<int> res = allIndex(arr,idx+1,data);
    if(arr[idx] == data) {
        res.push_back(idx);
    }
    return res;
}
//subsequence==================================================================================================
vector<string> subsequence(string str) {
    if(str.length() == 0){
        vector<string> ans;
        ans.push_back("");
        return ans;
    }
    vector<string> ans;
    char ch = str[0];
    string nstr = str.substr(1);
    vector<string> smallAns = subsequence(nstr);
    for(string everyString : smallAns) {
        ans.push_back(everyString);
        ans.push_back(ch+everyString);
    }
    return ans;
}
int subseq(string str,string ans) {
    if(str.length() == 0){
        cout<<ans<<",";
        return 1;
    }
    char ch = str[0];
    string nstr = str.substr(1);
    int count = 0;
    count+=subseq(nstr,ans);
    count+=subseq(nstr,ans+ch);
    return count;
}
//keyPad=======================================================================================================
string words[] = {".","abc","def","ghi","jkl","mno","pqrs","tuv","wx","yz"};
   vector<string> keyPad(string str)
    {
        if(str.length() == 0){
            vector<string> ans;
            ans.push_back("");
            return ans;
        }
        char ch = str[0];
        string nstr = str.substr(1);
        vector<string> smallAns = keyPad(nstr);
        vector<string> ans;
        for(string word : smallAns) {
            for(int i=0;i<words[ch-'0'].length();i++){
                ans.push_back(words[ch-'0'][i]+word);
            }
        }
        return ans;
    }

//SOLVE========================================================================================================
void solve(){
    
    cout<<subseq("abc","");
    
}
int main(){
    solve();
    return 0;
}
